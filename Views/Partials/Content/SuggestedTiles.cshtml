@inherits Umbraco.Web.Mvc.UmbracoViewPage


@{
    var tilesParent = Umbraco.Content("702f7185-50cb-49ff-9df0-b123d93b2874");
    if (tilesParent != null)
    {

        var items = tilesParent.Descendants<DtContentTile>().Where(x => (x.TileContentOrigination == "Original" || x.TileContentOrigination == "Partner") && x.Key != Model.Key);

        if (items.Any())
        {
            var rnd = new Random();

            <div class="3-random card border-0">
                <h5 class="text-center"><strong>These may also be of interest:</strong></h5>
                <div class="row">
                    @try
                    {
                        foreach (DtContentTile item in items.OrderBy(x => rnd.Next()).Take(3))
                        {
                            try
                            {
                                var fOptions = "";

                                @renderPrimaryTile(item, "primary", fOptions)
                            }
                            catch
                            {
                            }
                        }
                    }
                    catch { }
                </div>
            </div>
            <hr/>
        }
    }
}

@helper renderPrimaryTile(DtContentTile item, string style, string fOptions)
{
<div class="col-12 col-xs-12 col-md-4 p-2">
    <div class="card">
        <a class="suggestedContent" href="@item.Url" title="@(item.Name)">
            <div class="card-img">
                @if (item.BannerImage != null)
                {
                    <picture>
                        <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 480, furtherOptions:fOptions))" media="(min-width: 1200px)" />
                        <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 300, furtherOptions:fOptions))" media="(min-width: 996px)" />
                        <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 498, furtherOptions:fOptions))" media="(min-width: 576px)" />
                        <img srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 288, furtherOptions:fOptions))" alt="@(item.BannerImage.Name)" class="bg-@(style) card-img-top rounded-top" />
                    </picture>
                }
                else
                {
                    <div class="bg-@(style) text-white rounded-top min-vh-20 d-flex flex-column justify-content-center align-items-center">
                        @renderThemeIcon(item.TileType, 4)
                    </div>
                }
            </div>
            @if (item.BannerImage != null)
            {
                <div class="card-img-overlay text-white p-2">@renderThemeIcon(item.TileType, 2)</div>
            }

            <div class="card-body p-2 z-100">
                <small class="card-text text-info mb-0">@(item.Parent.Name.ToUpper())</small>
                <h5 class="card-title mb-1">
                    @(item.Name)
                </h5>
            </div>
        </a>
    </div>
</div>
}



@helper renderThemeIcon(string TileType, int? sizeMultiple)
{
    if (TileType == "External Link")
    {
        TileType = "Web Link";
    }

    var svgType = $"icon-{TileType.Replace(" ", "-").ToLower()}";
    <svg class="icon @(svgType)@(sizeMultiple!= null ? $" x{sizeMultiple}-icon":"")">
        <use xlink:href="/thinkblue-icons.svg#@(svgType)"></use>
    </svg>
    <span class="sr-only">@(TileType)</span>
}
