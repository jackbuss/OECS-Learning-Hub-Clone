@*@model TWS.ThinkBlue.Models.SearchViewModel*@
@inherits Umbraco.Web.Mvc.UmbracoViewPage<TWS.ThinkBlue.Models.SearchViewModel>
@using ClientDependency.Core.Mvc
@{
    Html.RequiresJs("~/js/vendor/jquery.validate-1.19.0.min.js")
        .RequiresJs("~/js/vendor/jquery.validate.unobtrusive-3.2.11.min.js")
        .RequiresJs("~/js/vendor/jquery.unobtrusive-ajax-3.2.6.min.js")
        .RequiresJs("~/js/vendor/isInViewport-3.0.4.js")
     .RequiresJs("~/Scripts/search.js");

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

}

@using (Ajax.BeginForm("SubmitSearchForm", "Search", null, new AjaxOptions
{
    HttpMethod = "POST",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "search-results"
}, new Dictionary<string, object> { { "id", "menu-search-form" }, { "class", "mt-2 mb-3" } }))
{
    @Html.HiddenFor(m => m.DocTypeAliases)
    @Html.HiddenFor(m => m.FieldPropertyAliases)
    @Html.HiddenFor(m => m.PageSize)
    @Html.AntiForgeryToken();

    <div class="input-group bg-info p-2">
        @Html.LabelFor(m => m.SearchTerm, "What would you like to search for?", new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.SearchTerm, new { placeholder = "Search", @class = "form-control", autocomplete = "off" })
    </div>

    <div id="search-filters">
        @renderBrowseOptions(Model.SearchThemes, true, "Themes", "tileTheme")
        @renderBrowseOptions(Model.SearchTypes, false, "Media", "tileType")
        @renderBrowseOptions(Model.SearchPersonas, false, "Interests", "tilePersonna")
    </div>

    <button id="search-button" class="btn btn-primary float-right mt-2 mb-2" type="submit">Explore</button>
}

@helper renderThemeIcon(string TileType, int? sizeMultiple)
{
    if (TileType == "External Link")
    {
        TileType = "Web Link";
    }

    var svgType = $"icon-{TileType.Replace(" ", "-").ToLower()}";
    <svg class="icon @(svgType)@(sizeMultiple!= null ? $" x{sizeMultiple}-icon":"")">
        <use xlink:href="/thinkblue-icons.svg#@(svgType)"></use>
    </svg>
    <span class="sr-only">@(TileType)</span>
}

@helper renderBrowseOptions(List<TWS.ThinkBlue.Models.FilterModel> filterList, bool isImage, string title, string field)
{
    if (filterList.Any())
    {
        <div class="card border-0 bg-transparent">
            <div class="card-header bg-white" id="heading@(title)">
                <p class="mb-0">Browse @(title)</p>
            </div>
            <div aria-labelledby="heading@(title)">
                <div class="card-body bg-info">
                    <div class="row p-1">
                        @for (int i = 0; i < filterList.Count; i++)
                        {
                            var fOptions = "";// "&tint=255,255,255,165";
                            IPublishedContent bannerImage = null;

                            string filterValue = $"{field}|{filterList[i].Value}";


                            if (isImage)
                            {
                                DtListPage item = Umbraco.Content(filterList[i].Id) as DtListPage;
                                bannerImage = (item.BannerImage != null ? item.BannerImage : Umbraco.Media(Guid.Parse("e2fdcf23-4e61-46ef-9837-7e88ca180132")));
                            }
                            <div class="col-6 col-md-4 col-lg-3">
                                <div class="text-white custom-rb">
                                    @Html.RadioButtonFor(m => m.Browse, filterValue, new { id = filterList[i].Value.Replace(" ", "_") })
                                    <label for="@filterList[i].Value.Replace(" ","_")" class="w-100 d-inline-flex align-items-center">
                                        @if (isImage)
                                        {
                                            <picture>
                                                <source srcset="@(bannerImage.GetCropUrl(cropAlias: "Square", width: 240, furtherOptions: fOptions))" media="(min-width: 1200px)" />
                                                <source srcset="@(bannerImage.GetCropUrl(cropAlias: "Square", width: 120, furtherOptions: fOptions))" media="(min-width: 996px)" />
                                                <source srcset="@(bannerImage.GetCropUrl(cropAlias: "Square", width: 80, furtherOptions: fOptions))" media="(min-width: 576px)" />
                                                <img srcset="@(bannerImage.GetCropUrl(cropAlias: "Square", width: 80, furtherOptions: fOptions))" alt="@(bannerImage.Name)" class="card-img" />
                                            </picture>
                                        }
                                        else
                                        {
                                            <span id="icon" class="text-primary pb-2 pt-2">@renderThemeIcon(filterList[i].Value, 2)</span>
                                        }
                                        <span class="w-100 p-2">@(filterList[i].Value)</span>
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}
