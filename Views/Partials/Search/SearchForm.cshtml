@*@model TWS.ThinkBlue.Models.SearchViewModel*@
@inherits Umbraco.Web.Mvc.UmbracoViewPage<TWS.ThinkBlue.Models.SearchViewModel>
@using ClientDependency.Core.Mvc
@{
    Html.RequiresJs("~/js/vendor/jquery.validate-1.19.0.min.js")
        .RequiresJs("~/js/vendor/jquery.validate.unobtrusive-3.2.11.min.js")
        .RequiresJs("~/js/vendor/jquery.unobtrusive-ajax-3.2.6.min.js")
        .RequiresJs("~/js/vendor/isInViewport-3.0.4.js")
     .RequiresJs("~/Scripts/search.js");

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

}

@using (Ajax.BeginForm("SubmitSearchForm", "Search", null, new AjaxOptions
{
    HttpMethod = "POST",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "search-results"
}, new Dictionary<string, object> { { "id", "menu-search-form" }, { "class", "mt-2 mb-3" } }))
{
    @Html.HiddenFor(m => m.DocTypeAliases)
    @Html.HiddenFor(m => m.FieldPropertyAliases)
    @Html.HiddenFor(m => m.PageSize)
    @Html.AntiForgeryToken();

    <div class="input-group p-2">
        @Html.LabelFor(m => m.SearchTerm, "What would you like to search for?", new { @class = "sr-only" })
        @Html.TextBoxFor(m => m.SearchTerm, new { placeholder = "Search", @class = "form-control search-text", autocomplete = "off" })
    </div>

    <div id="search-filters" class="collapse show">
        @renderBrowseOptions(Model.SearchThemes, true, "Theme", "tileTheme")
        @renderBrowseOptions(Model.SearchTypes, false, "Media", "tileType")
        @renderBrowseOptions(Model.SearchPersonas, false, "Interest", "tilePersonna")
    </div>

    @*<button id="search-button" class="btn btn-primary float-right mt-2 mb-2" type="submit">Explore</button>*@
}

@helper renderThemeIcon(string TileType, int? sizeMultiple)
{
    if (TileType == "External Link")
    {
        TileType = "Web Link";
    }

    var svgType = $"icon-{TileType.Replace(" ", "-").ToLower()}";
    <svg class="icon @(svgType)@(sizeMultiple!= null ? $" x{sizeMultiple}-icon":"")">
        <use xlink:href="/thinkblue-icons.svg#@(svgType)"></use>
    </svg>
    <span class="sr-only">@(TileType)</span>
}

@helper renderBrowseOptions(List<TWS.ThinkBlue.Models.FilterModel> filterList, bool isImage, string title, string field)
{
    if (filterList.Any())
    {
        <div class="card border-0 bg-transparent pt-2">
            <div class="bg-white pl-2" id="heading@(title)">
                <p class="mb-0 font-weight-bold">Browse by @(title)</p>
            </div>
            <div aria-labelledby="heading@(title)">
                <div class="card-body pt-1 pb-1">
                    <div class="row p-1">
                        @for (int i = 0; i < filterList.Count; i++)
                        {
                            string filterValue = $"{field}|{filterList[i].Value}";
                            <div class="col-6 col-sm-6 col-md-4 col-lg-3 p-0">
                                <div class="text-primary custom-control custom-radio vertical-align-items d-inline-block">
                                    @Html.RadioButtonFor(m => m.Browse, filterValue, new { id = filterList[i].Value.Replace(" ", "_"), @class="custom-control-input" })
                                    
                                    <label for="@filterList[i].Value.Replace(" ","_")" class="w-100 align-items-center custom-control-label">
                                        @(filterList[i].Value)
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}
