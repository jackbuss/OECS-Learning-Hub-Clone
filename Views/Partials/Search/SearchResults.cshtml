@inherits Umbraco.Web.Mvc.UmbracoViewPage<TWS.ThinkBlue.Models.SearchViewModel>
@{
    Html.EnableUnobtrusiveJavaScript();
    var styles = new List<string> { "primary", "secondary", "info", "success", "warning", "danger" };
    var rnd = new Random();
    var fOptions = "&tint=255,255,255,165";
    DtContentTile featuredTile = null;
}
@if (Model.SearchResults != null)
{
    if (Model.SearchResults.HasResults)
    {
        @*Initial hero content*@
        if (Model.SearchResults.FeaturedResults != null && Model.SearchResults.PageNumber == 1
                && String.IsNullOrWhiteSpace(Model.Browse) && String.IsNullOrWhiteSpace(Model.SearchTerm))
        {
            if (Model.SearchResults.FeaturedResults.Any())
            {
                featuredTile = Model.SearchResults.FeaturedResults.First() as DtContentTile;
                //inject the top featured rather than include in the search

                List<String> cookieList = new List<String>();
                if (Request.Cookies["viewedVideos"] != null)
                {
                    String[] cookie = Request.Cookies["viewedVideos"].Value.Split(',');
                    cookieList = cookie.ToList();
                    featuredTile = Model.SearchResults.FeaturedResults.Where(x => !cookieList.Contains(x.Key.ToString())).FirstOrDefault() as DtContentTile;
                }
                if (featuredTile != null)
                {
                    <!-- start featured -->
                    @renderFeaturedTile(featuredTile, "primary", fOptions, true);
                    <!-- end featured -->
                }
            }

            @*Theme panels*@
            var tiles = Umbraco.Content(new Guid("702f7185-50cb-49ff-9df0-b123d93b2874"));
            foreach (var theme in tiles.Children<DtListPage>())
            {

                <div class="card m-1 border-0 rounded-0 mt-2">
                    <div class="card-header text-primary bg-transparent d-flex justify-content-between align-items-baseline pt-0 pb-2 px-2">
                        <h5><strong>@(theme.Name)</strong></h5>
                        <a id="theme-btn-@(theme.Name.Replace(" ", "_"))" class="text-primary small" href="#">View All</a>
                    </div>
                    <div class="card-body py-2">
                        <div class="row">
                            @foreach (var tile in theme.Children<DtContentTile>
                                ().Take(4))
                            {
                                if (tile == theme.Children<DtContentTile>
                                    ().First())
                                {
                                    @renderExternalTile(tile, "primary", fOptions)
                                }
                                else
                                {
                                    @renderExternalTile(tile, "primary", fOptions)
                                }
                            }
                        </div>
                    </div>

                </div>
            }
            <div class="col-12 mt-4">
                <h2 class="text-primary"><strong>All Content</strong></h2>
            </div>
        }


        @*now our search results mapping a fixed tile pattern with a little variation*@
        foreach (DtContentTile result in Model.SearchResults.Results)
        {
            var item = result as DtContentTile;

            var randomIndex = rnd.Next(styles.Count);
            var style = styles[randomIndex];
            styles.RemoveAt(randomIndex);
            if (styles.Count == 0)
            {
                styles = new List<string> { "primary", "secondary", "info", "success", "warning", "danger" };
            }

            switch (item.TileContentOrigination)
            {
                case "Original":
                    if (Model.SearchResults.FeaturedResults.Contains(item))
                    {
                        // don't reshow the featured item
                        if (featuredTile != item)
                        {
                            @renderFeaturedTile(item, style, fOptions, false)
                        }
                    }
                    else
                    {
                        @renderPrimaryTile(item, style, fOptions)
                    }
                    break;
                case "Partner":
                    @renderPrimaryTile(item, style, fOptions)
                    break;
                case "External":
                    @renderExternalTile(item, style, fOptions)
                    break;
                default:
                    break;
            }
        }

        using (Ajax.BeginForm("SubmitSearchForm", "Search", null, new AjaxOptions
        {
            HttpMethod = "POST",
            InsertionMode = InsertionMode.InsertAfter,
            UpdateTargetId = "search-results",
            OnSuccess = "tbSearch.loadMoreSuccess",
            OnBegin = "tbSearch.loadMoreBegin"
        }, new Dictionary<string, object> { { "id", "pagination-form" }, { "class", "" } }))
        {
            @Html.HiddenFor(m => m.DocTypeAliases)
            @Html.HiddenFor(m => m.FieldPropertyAliases)
            @Html.HiddenFor(m => m.PageSize)
            @Html.HiddenFor(m => m.SearchTerm)
            @Html.HiddenFor(m => m.Browse)

            if (Model.SearchThemes != null)
            {
                for (int i = 0; i < Model.SearchThemes.Count(); i++)
                {
                    @Html.HiddenFor(m => m.SearchThemes[i].Value)
                }
            }
            if (Model.SearchTypes != null)
            {
                for (int i = 0; i < Model.SearchTypes.Count(); i++)
                {
                    @Html.HiddenFor(m => m.SearchTypes[i].Value)
                }
            }
            if (Model.SearchPersonas != null)
            {
                for (int i = 0; i < Model.SearchPersonas.Count(); i++)
                {
                    @Html.HiddenFor(m => m.SearchPersonas[i].Value)
                }
            }
            @Html.AntiForgeryToken();

            if (Model.SearchResults.PageNumber < Model.SearchResults.PageCount)
            {
                <button id="load-more" class="btn btn-primary ml-2 mt-4" name="page-@(Model.SearchResults.PageNumber + 1)" aria-label="Load More Results">
                    Load More
                </button>
            }
        }
    }
    else
    {
        // need to show suggested results?
        <div class="col-12"><p>No results to display</p></div>
    }
}
@helper renderThemeIcon(string TileType, int? sizeMultiple)
{
    if (TileType == "External Link")
    {
        TileType = "Web Link";
    }

    var svgType = $"icon-{TileType.Replace(" ", "-").ToLower()}";
    <svg class="icon @(svgType)@(sizeMultiple!= null ? $" x{sizeMultiple}-icon":"")">
        <use xlink:href="/thinkblue-icons.svg#@(svgType)"></use>
    </svg>
    <span class="sr-only">@(TileType)</span>
}

@helper renderFeaturedTile(DtContentTile item, string style, string fOptions, bool hero)
{

var heroClass = hero ? "" : " col-md-8 col-lg-6";
var aspect = hero ? "Landscape" : "Landscape";
var bgstyle = item.BannerImage != null ? "" : $" bg-{style}";
var forcedheight = item.BannerImage != null ? "" : " min-vh-30";

    <div class="col-12 col-xs-12@(heroClass) p-2">
        <div class="card@(bgstyle) border-0@(forcedheight)">
            <a class="text-white" href="@item.Url" @(item.TileType == "Video" ? $"data-key={@item.Key} " : "") data-toggle="modal" data-target="#modal" title="@(item.Name)">
                @if (item.BannerImage != null)
                {
                    <picture>
                        <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: aspect, width: 960, furtherOptions:fOptions))" media="(min-width: 1200px)" />
                        <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: aspect, width: 600, furtherOptions:fOptions))" media="(min-width: 996px)" />
                        <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: aspect, width: 576, furtherOptions:fOptions))" media="(min-width: 576px)" />
                        <img srcset="@(item.BannerImage.GetCropUrl(cropAlias: aspect , width: 576,furtherOptions:fOptions))" alt="@(item.BannerImage.Name)" class="card-img-top rounded" />
                    </picture>
                }
                <div class="card-img-overlay d-flex flex-column justify-content-end text-white p-1 rounded">
                    @if (item.BannerImage != null)
                    {
                        <div class="text-white mb-auto p-2">@renderThemeIcon(item.TileType, 2)</div>
                    }
                    else
                    {
                        <div class="text-white text-center mb-auto mt-auto p-2">@renderThemeIcon(item.TileType, 4)</div>
                    }
                    <div class="p-2 w-100 rounded-bottom text-white">
                        <p class="card-text mb-1">@(item.Parent.Name.ToUpper())</p>
                        <h3 class="card-title">@(item.Name)</h3>
                    </div>
                </div>
            </a>
        </div>
    </div>
}

@helper renderPrimaryTile(DtContentTile item, string style, string fOptions)
{
    <div class="col-6 col-xs-6 col-md-4 col-lg-3 p-2">
        <div class="card">
            <a class="" href="@item.Url" @(item.TileType == "Video" ? $"data-key={@item.Key} " : "") data-toggle="modal" data-target="#modal" title="@(item.Name)">
                <div class="card-img">
                    @if (item.BannerImage != null)
                    {
                        <picture>
                            <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 480, furtherOptions:fOptions))" media="(min-width: 1200px)" />
                            <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 300, furtherOptions:fOptions))" media="(min-width: 996px)" />
                            <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 498, furtherOptions:fOptions))" media="(min-width: 576px)" />
                            <img srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 288, furtherOptions:fOptions))" alt="@(item.BannerImage.Name)" class="bg-@(style) card-img-top rounded-top" />
                        </picture>
                    }
                    else
                    {
                        <div class="bg-@(style) text-white rounded-top min-vh-30 d-flex flex-column justify-content-center align-items-center">
                            @renderThemeIcon(item.TileType, 4)
                        </div>
                    }
                </div>
                @if (item.BannerImage != null)
                {
                    <div class="card-img-overlay text-white p-2">@renderThemeIcon(item.TileType, 2)</div>
                }

                <div class="card-body p-2 z-100">
                    <small class="card-text text-info mb-0">@(item.Parent.Name.ToUpper())</small>
                    <h5 class="card-title mb-1">
                        @(item.Name)
                    </h5>
                </div>
            </a>
        </div>
    </div>
}

@helper renderPartnerTile(DtContentTile item, string style, string fOptions)
{
    <div class="col-12 col-xs-12 col-md-6 p-2">
        <div class="card">
            <a class="" href="@item.Url" @(item.TileType == "Video" ? $"data-key={@item.Key} " : "") data-toggle="modal" data-target="#modal" title="@(item.Name)">
                <div class="row no-gutters h-100">
                    @if (item.BannerImage != null)
                    {
                        <div class="col-4 rounded p-0">
                            <picture>
                                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 320, furtherOptions:fOptions))" media="(min-width: 1200px)" />
                                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 200, furtherOptions:fOptions))" media="(min-width: 996px)" />
                                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 166, furtherOptions:fOptions))" media="(min-width: 576px)" />
                                <img srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Square", width: 192, furtherOptions:fOptions))" alt="@(item.BannerImage.Name)" class="card-img rounded h-100" />
                            </picture>
                        </div>
                    }
                    <div class="@(item.BannerImage != null ? "col-8" : "col-12") p-0">
                        <div class="card-body p-2">
                            <small class="card-text text-info  mb-0">@renderThemeIcon(item.TileType, 2) @(item.Parent.Name.ToUpper())</small>
                            <h5 class="card-title text-primary">
                                @(item.Name)
                            </h5>
                        </div>
                    </div>
                </div>
            </a>
        </div>
    </div>
}

@helper renderExternalTile(DtContentTile item, string style, string fOptions)
{
    fOptions = "";
    <div class="col-12 col-xs-12 col-md-6 pl-2 pr-2">
        <div class="card border-top-0 border-left-0 border-right-0 rounded-0">
            <a class="" href="@item.Url" @(item.TileType == "Video" ? $"data-key={@item.Key} " : "") data-toggle="modal" data-target="#modal" title="@(item.Name)">
                <div class="row no-gutters">
                    <div class="col-2 rounded pt-1 pb-2 d-flex align-items-center justify-content-center">
                        @if (item.BannerImage != null)
                        {

                            <picture>
                                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Square", width: 320, furtherOptions:fOptions))" media="(min-width: 1200px)" />
                                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Square", width: 200, furtherOptions:fOptions))" media="(min-width: 996px)" />
                                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Square", width: 166, furtherOptions:fOptions))" media="(min-width: 576px)" />
                                <img srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Square", width: 192))" alt="@(item.BannerImage.Name)" class="card-img rounded h-100" />
                            </picture>

                        }
                        else
                        {
                            <div class="text-primary">@renderThemeIcon(item.TileType, 2)</div>
                        }
                    </div>
                    <div class="col-10 p-0">
                        <div class="card-body p-2">
                            <small class="card-text text-info  mb-0">@(item.Parent.Name.ToUpper())</small>
                            <h5 class="card-title text-primary">
                                @(item.Name)
                            </h5>
                        </div>
                    </div>
                </div>
            </a>
        </div>
    </div>
}