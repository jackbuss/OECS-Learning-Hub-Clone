@inherits Umbraco.Web.Mvc.UmbracoViewPage<DtContentTile>
@{
    if (Request.QueryString["m"] == "1")
    {
        Layout = null;
    }
    else
    {
        Layout = "vCommon.cshtml";
    }

    var styles = new List<string> { "primary", "secondary", "info", "success", "warning", "danger" };
    var rnd = new Random();
    var style = styles[rnd.Next(styles.Count)];
    var item = Model;
}

<div class="row no-gutters">
    <div class="col-1 rounded pt-1 pb-2 d-flex align-items-center justify-content-center">
        <div class="text-primary">@renderThemeIcon(item.TileType, 2)</div>
    </div>
    <div class="col-11 p-0">
        <div class="card-body p-2">
            <small class="card-text text-info  mb-0">@(item.Parent.Name.ToUpper())</small>
            <h5 class="card-title text-primary">@(item.Name)</h5>
        </div>
    </div>
</div>

@if (item.BannerImage == null && Model.TileExternalVideo == null)
{

    <div class="card border-0">

        <div class="card-img">
            <div class="bg-@(style) text-white text-center rounded p-5">
                <div class="p-4">@renderThemeIcon(item.TileType, 4)</div>
            </div>
        </div>
    </div>
}
else
{

    <div class="card bg-@(style) border-0">

        @if (Model.TileExternalVideo != null)
        {
            <div class="embed-responsive embed-responsive-16by9 rounded">
                @Html.Raw(Model.TileExternalVideo.EmbedCode.ToHtmlString().Replace("<iframe", "<iframe class=\"embed-responsive-item\"").Replace("?feature=oembed", "?feature=oembed&rel=0"))
            </div>
        }
        else if (item.BannerImage != null)
        {
            var fOptions = "";//"&tint=255,255,255,165";
            <picture>
                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 960, furtherOptions: fOptions))" media="(min-width: 1200px)" />
                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 600, furtherOptions: fOptions))" media="(min-width: 996px)" />
                <source srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 576, furtherOptions: fOptions))" media="(min-width: 576px)" />
                <img srcset="@(item.BannerImage.GetCropUrl(cropAlias: "Landscape", width: 576, furtherOptions: fOptions))" alt="@(item.BannerImage.Name)" class="card-img-top rounded" />
            </picture>
        }
        @*<div class="d-flex flex-column justify-content-end text-white p-1">
                @if (Model.TileExternalVideo == null)
                {
                    <div class="text-white mb-auto p-2">@renderThemeIcon(item.TileType, 4)</div>
                }
                <div class="p-2 w-100 rounded-bottom text-white">
                    <p class="card-text mb-1">@(item.Parent.Name.ToUpper())</p>
                    <h3 class="card-title">@(item.Name)</h3>
                </div>
            </div>*@



    </div>
}

<div class="card mt-1 border-0">
    <div class="card-body">
        @if (Model.ContentTitle != Model.Name)
        {
            <div class="">
                <h5>@(Model.ContentTitle)</h5>
            </div>
        }
        @if (Model.ContentGrid != null)
        {
            <div class="card-text">
                @Html.GetGridHtml(Model, "contentGrid")
            </div>
        }

        @if (!String.IsNullOrWhiteSpace(Model.TileExternalUrl))
        {
            <div class="card-link text-center">
                <cite title="Source"><a href="@Model.TileExternalUrl" class="btn btn-@style card-link alert-link" title="Source Content (opens in a new window)" target="_blank">Start exploring</a></cite>
            </div>
        }
    </div>
</div>

@{
    IPublishedContent node = null;
    var exists = false;
    //if (Model.SelectedCallToAction != null)
    //{
    //    node = Model.SelectedCallToAction;
    //    exists = true;
    //}
     if (Model.Value("SelectedCallToAction", fallback: Fallback.ToAncestors) != null)
    {
        node = Model.Value("SelectedCallToAction", fallback: Fallback.ToAncestors) as MtCallToAction;
        exists = true;
    }
}


@if (exists == true)
{
    try
    {

        <div class="card border-0">
            @*<img class="w-100" src="@Model.SelectedCallToAction.Url" />*@

            @{
                var fOptions = "&tint=255,255,255,165";
                <picture>
                    <source srcset="@(node.GetCropUrl(width: 960, furtherOptions: fOptions + "&heightRatio=0.2"))" media="(min-width: 1200px)" />
                    <source srcset="@(node.GetCropUrl(cropAlias: "Landscape", width: 600, furtherOptions: fOptions))" media="(min-width: 996px)" />
                    <source srcset="@(node.GetCropUrl(cropAlias: "Landscape", width: 576, furtherOptions: fOptions))" media="(min-width: 576px)" />
                    <img srcset="@(node.GetCropUrl(cropAlias: "Landscape", width: 576, furtherOptions: fOptions))" alt="@(node.Name)" class="card-img-top rounded" />
                </picture>
            }

            <div class="calltoaction card-img-overlay d-flex flex-column">
                <div class="inner-container m-auto d-flex flex-column">
                    <h5 class="m-auto text-white pb-3 text-center">@node.Value("CtaText")</h5>
                    <a class="m-auto text-info" href="@node.Value("CallToActionURL")" target="_blank" alt="@node.Name">
                        @renderThemeIcon("study-arrow", 4)
                    </a>
                </div>
            </div>
        </div>
    }
    catch { }
}

@helper renderThemeIcon(string TileType, int? sizeMultiple)
{

    if (TileType == "External Link")
    {
        TileType = "Web Link";
    }

    var svgType = $"icon-{TileType.Replace(" ", "-").ToLower()}";
    <svg class="icon @(svgType)@(sizeMultiple!= null ? $" x{sizeMultiple}-icon":"")">
        <use xlink:href="/thinkblue-icons.svg#@(svgType)"></use>
    </svg>
    <span class="sr-only">@(TileType)</span>
}
